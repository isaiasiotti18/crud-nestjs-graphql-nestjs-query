# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddCategoriesToProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddProductsToBrandInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddProductsToCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

type Brand {
  createdAt: DateTime!
  deletedAt: DateTime!
  id: String!
  name: String!
  products(
    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): BrandProductsConnection
  updatedAt: DateTime!
}

type BrandAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type BrandConnection {
  """Array of nodes."""
  nodes: [Brand!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type BrandCountAggregate {
  createdAt: Int
  deletedAt: Int
  id: Int
  name: Int
  updatedAt: Int
}

input BrandDeleteFilter {
  and: [BrandDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [BrandDeleteFilter!]
  updatedAt: DateFieldComparison
}

type BrandDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input BrandFilter {
  and: [BrandFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [BrandFilter!]
  products: BrandFilterProductFilter
  updatedAt: DateFieldComparison
}

input BrandFilterProductFilter {
  and: [BrandFilterProductFilter!]
  brandId: NumberFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [BrandFilterProductFilter!]
  price: FloatFieldComparison
  updatedAt: DateFieldComparison
}

type BrandMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type BrandMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type BrandProductsConnection {
  """Array of nodes."""
  nodes: [Product!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input BrandSort {
  direction: SortDirection!
  field: BrandSortFields!
  nulls: SortNulls
}

enum BrandSortFields {
  createdAt
  deletedAt
  id
  name
  updatedAt
}

input BrandUpdateFilter {
  and: [BrandUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [BrandUpdateFilter!]
  updatedAt: DateFieldComparison
}

type Category {
  createdAt: DateTime!
  deletedAt: DateTime!
  id: String!
  name: String!
  products(
    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): CategoryProductsConnection
  updatedAt: DateTime!
}

type CategoryAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type CategoryConnection {
  """Array of nodes."""
  nodes: [Category!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type CategoryCountAggregate {
  createdAt: Int
  deletedAt: Int
  id: Int
  name: Int
  updatedAt: Int
}

input CategoryDeleteFilter {
  and: [CategoryDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [CategoryDeleteFilter!]
  updatedAt: DateFieldComparison
}

type CategoryDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input CategoryFilter {
  and: [CategoryFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [CategoryFilter!]
  products: CategoryFilterProductFilter
  updatedAt: DateFieldComparison
}

input CategoryFilterProductFilter {
  and: [CategoryFilterProductFilter!]
  brandId: NumberFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [CategoryFilterProductFilter!]
  price: FloatFieldComparison
  updatedAt: DateFieldComparison
}

type CategoryMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type CategoryMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type CategoryProductsConnection {
  """Array of nodes."""
  nodes: [Product!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input CategorySort {
  direction: SortDirection!
  field: CategorySortFields!
  nulls: SortNulls
}

enum CategorySortFields {
  createdAt
  deletedAt
  id
  name
  updatedAt
}

input CategoryUpdateFilter {
  and: [CategoryUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [CategoryUpdateFilter!]
  updatedAt: DateFieldComparison
}

input CreateBrandInput {
  name: String!
}

input CreateCategoryInput {
  name: String!
}

input CreateManyBrandsInput {
  """Array of records to create"""
  brands: [CreateBrandInput!]!
}

input CreateManyCategoriesInput {
  """Array of records to create"""
  categories: [CreateCategoryInput!]!
}

input CreateManyProductsInput {
  """Array of records to create"""
  products: [CreateProductInput!]!
}

input CreateOneBrandInput {
  """The record to create"""
  brand: CreateBrandInput!
}

input CreateOneCategoryInput {
  """The record to create"""
  category: CreateCategoryInput!
}

input CreateOneProductInput {
  """The record to create"""
  product: CreateProductInput!
}

input CreateProductInput {
  brandId: Float
  description: String
  name: String!
  price: Float!
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyBrandsInput {
  """Filter to find records to delete"""
  filter: BrandDeleteFilter!
}

input DeleteManyCategoriesInput {
  """Filter to find records to delete"""
  filter: CategoryDeleteFilter!
}

input DeleteManyProductsInput {
  """Filter to find records to delete"""
  filter: ProductDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteOneBrandInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductInput {
  """The id of the record to delete."""
  id: ID!
}

input FloatFieldComparison {
  between: FloatFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: FloatFieldComparisonBetween
  notIn: [Float!]
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type Mutation {
  addCategoriesToProduct(input: AddCategoriesToProductInput!): Product!
  addProductsToBrand(input: AddProductsToBrandInput!): Brand!
  addProductsToCategory(input: AddProductsToCategoryInput!): Category!
  createBrand(createBrandInput: CreateBrandInput!): Brand!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createManyBrands(input: CreateManyBrandsInput!): [Brand!]!
  createManyCategories(input: CreateManyCategoriesInput!): [Category!]!
  createManyProducts(input: CreateManyProductsInput!): [Product!]!
  createOneBrand(input: CreateOneBrandInput!): Brand!
  createOneCategory(input: CreateOneCategoryInput!): Category!
  createOneProduct(input: CreateOneProductInput!): Product!
  createProduct(createProductInput: CreateProductInput!): Product!
  deleteManyBrands(input: DeleteManyBrandsInput!): DeleteManyResponse!
  deleteManyCategories(input: DeleteManyCategoriesInput!): DeleteManyResponse!
  deleteManyProducts(input: DeleteManyProductsInput!): DeleteManyResponse!
  deleteOneBrand(input: DeleteOneBrandInput!): BrandDeleteResponse!
  deleteOneCategory(input: DeleteOneCategoryInput!): CategoryDeleteResponse!
  deleteOneProduct(input: DeleteOneProductInput!): ProductDeleteResponse!
  removeBrand(id: Int!): Brand!
  removeBrandFromProduct(input: RemoveBrandFromProductInput!): Product!
  removeCategoriesFromProduct(input: RemoveCategoriesFromProductInput!): Product!
  removeCategory(id: Int!): Category!
  removeProduct(id: ID!): Product!
  removeProductsFromBrand(input: RemoveProductsFromBrandInput!): Brand!
  removeProductsFromCategory(input: RemoveProductsFromCategoryInput!): Category!
  setBrandOnProduct(input: SetBrandOnProductInput!): Product!
  setCategoriesOnProduct(input: SetCategoriesOnProductInput!): Product!
  setProductsOnBrand(input: SetProductsOnBrandInput!): Brand!
  setProductsOnCategory(input: SetProductsOnCategoryInput!): Category!
  updateBrand(updateBrandInput: UpdateBrandInput!): Brand!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updateManyBrands(input: UpdateManyBrandsInput!): UpdateManyResponse!
  updateManyCategories(input: UpdateManyCategoriesInput!): UpdateManyResponse!
  updateManyProducts(input: UpdateManyProductsInput!): UpdateManyResponse!
  updateOneBrand(input: UpdateOneBrandInput!): Brand!
  updateOneCategory(input: UpdateOneCategoryInput!): Category!
  updateOneProduct(input: UpdateOneProductInput!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Product {
  brand: Brand
  brandId: Float
  categories(
    """Specify to filter the records returned."""
    filter: CategoryFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [CategorySort!] = []
  ): ProductCategoriesConnection
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String
  id: String!
  name: String!
  price: Float!
  updatedAt: DateTime!
}

type ProductAggregateGroupBy {
  brandId: Float
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  name: String
  price: Float
  updatedAt: DateTime
}

type ProductAvgAggregate {
  brandId: Float
  price: Float
}

type ProductCategoriesConnection {
  """Array of nodes."""
  nodes: [Category!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductConnection {
  """Array of nodes."""
  nodes: [Product!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductCountAggregate {
  brandId: Int
  createdAt: Int
  deletedAt: Int
  description: Int
  id: Int
  name: Int
  price: Int
  updatedAt: Int
}

input ProductDeleteFilter {
  and: [ProductDeleteFilter!]
  brandId: NumberFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ProductDeleteFilter!]
  price: FloatFieldComparison
  updatedAt: DateFieldComparison
}

type ProductDeleteResponse {
  brandId: Float
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  name: String
  price: Float
  updatedAt: DateTime
}

input ProductFilter {
  and: [ProductFilter!]
  brand: ProductFilterBrandFilter
  brandId: NumberFieldComparison
  categories: ProductFilterCategoryFilter
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ProductFilter!]
  price: FloatFieldComparison
  updatedAt: DateFieldComparison
}

input ProductFilterBrandFilter {
  and: [ProductFilterBrandFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ProductFilterBrandFilter!]
  updatedAt: DateFieldComparison
}

input ProductFilterCategoryFilter {
  and: [ProductFilterCategoryFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ProductFilterCategoryFilter!]
  updatedAt: DateFieldComparison
}

type ProductMaxAggregate {
  brandId: Float
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  name: String
  price: Float
  updatedAt: DateTime
}

type ProductMinAggregate {
  brandId: Float
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  name: String
  price: Float
  updatedAt: DateTime
}

input ProductSort {
  direction: SortDirection!
  field: ProductSortFields!
  nulls: SortNulls
}

enum ProductSortFields {
  brandId
  createdAt
  deletedAt
  description
  id
  name
  price
  updatedAt
}

type ProductSumAggregate {
  brandId: Float
  price: Float
}

input ProductUpdateFilter {
  and: [ProductUpdateFilter!]
  brandId: NumberFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ProductUpdateFilter!]
  price: FloatFieldComparison
  updatedAt: DateFieldComparison
}

type Query {
  brand(
    """The id of the record to find."""
    id: ID!
  ): Brand
  brands(
    """Specify to filter the records returned."""
    filter: BrandFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [BrandSort!] = []
  ): BrandConnection!
  categories(
    """Specify to filter the records returned."""
    filter: CategoryFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [CategorySort!] = []
  ): CategoryConnection!
  category(
    """The id of the record to find."""
    id: ID!
  ): Category
  product(
    """The id of the record to find."""
    id: ID!
  ): Product
  products(
    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductConnection!
}

input RemoveBrandFromProductInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveCategoriesFromProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveProductsFromBrandInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveProductsFromCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetBrandOnProductInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetCategoriesOnProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetProductsOnBrandInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetProductsOnCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateBrandInput {
  id: Int
  name: String
}

input UpdateCategoryInput {
  id: ID
  name: String
}

input UpdateManyBrandsInput {
  """Filter used to find fields to update"""
  filter: BrandUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBrandInput!
}

input UpdateManyCategoriesInput {
  """Filter used to find fields to update"""
  filter: CategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCategoryInput!
}

input UpdateManyProductsInput {
  """Filter used to find fields to update"""
  filter: ProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateOneBrandInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBrandInput!
}

input UpdateOneCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCategoryInput!
}

input UpdateOneProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductInput!
}

input UpdateProductInput {
  brandId: Float
  description: String
  id: ID
  name: String
  price: Float
}